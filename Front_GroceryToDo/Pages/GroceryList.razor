@page "/GroceryList"
@using Front_GroceryToDo.Data
@using Front_GroceryToDo.Models
@inject IRecordsService RecordsService
@inject NavigationManager NavManager

<h3>GroceryList</h3>
<hr/>
@if (record == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <em>@record.Description</em>
    <hr/>
    <em>Uncompleted</em>
    <ListRendering Items="@uncompletedItems" ButtonName="Complete" GroceryListInstance="@this"></ListRendering>
    <br>
    <em>Completed</em>
    <ListRendering Items="@completedItems" ButtonName="Incomplete" GroceryListInstance="@this"></ListRendering>
    <button class="btn btn-primary" @onclick="Add">
        Add
    </button>
    <button class="btn btn-warning" @onclick="WipeButtonPressed">
        Wipe all data
    </button>
}

@code {
    public Record record;
    private List<Item> completedItems;
    private List<Item> uncompletedItems;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            record = await RecordsService.GetRecordByIdAsync(1002);
            completedItems = new List<Item>();
            uncompletedItems = new List<Item>();
            foreach (var item in record.Items)
            {
                if (item.IsCompleted)
                {
                    completedItems.Add(item);
                }
                else
                {
                    uncompletedItems.Add(item);
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NavManager.NavigateTo("/Error");
        }
    }

    private void Add()
    {
        NavManager.NavigateTo("AddItem");
    }

    private async Task WipeButtonPressed()
    {
        try
        {
            bool result = await RecordsService.WipeRecordAsync();
            if (result)
            {
                await Reload();
            }
            else
            {
                NavManager.NavigateTo("/Error");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NavManager.NavigateTo("/Error");
        }
    }

    public async Task Reload()
    {
    //record = await RecordsService.GetRecordByIdAsync(9999);
        await OnInitializedAsync();
        StateHasChanged();
    }

}