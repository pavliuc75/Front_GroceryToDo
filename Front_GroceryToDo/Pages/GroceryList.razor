@page "/GroceryList"
@using Front_GroceryToDo.Data
@using Front_GroceryToDo.Models
@inject IRecordsService RecordsService
@inject NavigationManager NavManager
@inject ClipboardService ClipboardService
@inject IUserService UserService

@if (record == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <p>
        <b>
            List Unique ID: <em>@record.Id </em>
            <span>
                <button @onclick="CopyToClipboard">Copy</button>
            </span>
        </b>
    </p>
    <p><a href="/">Switch list</a></p>
    <hr/>
    <p>Description: <em>@record.Description</em></p>
    <hr/>
    <em>Uncompleted</em>
    <ListRendering Items="@uncompletedItems" ButtonName="Complete" GroceryListInstance="@this"></ListRendering>
    <br>
    <em>Completed</em>
    <ListRendering Items="@completedItems" ButtonName="Incomplete" GroceryListInstance="@this"></ListRendering>
    <hr/>
    <button @onclick="Add">
        Add
    </button>
    <br>
    <br>
    <div>
        <button @onclick="ToggleMenu">
            Settings
        </button>
        <div class="@NavMenuCssClass">
            <div>
                <ul>
                    <li>
                        <button @onclick="WipeButtonPressed">Wipe all data</button>
                    </li>
                    <li>
                        <button @onclick="ChangeDescriptionButtonPressed">Change list description</button>
                    </li>
                </ul>
            </div>
        </div>
    </div>
}

@code {
    public Record record;
    private List<Item> completedItems;
    private List<Item> uncompletedItems;

    bool collapseMenu;
    string NavMenuCssClass => collapseMenu ? "collapse" : null;

    void ToggleMenu()
    {
        collapseMenu = !collapseMenu;
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            record = await RecordsService.GetRecordByIdAsync(UserService.GetCachedId());
            completedItems = new List<Item>();
            uncompletedItems = new List<Item>();
            collapseMenu = true;
            foreach (var item in record.Items)
            {
                if (item.IsCompleted)
                {
                    completedItems.Add(item);
                }
                else
                {
                    uncompletedItems.Add(item);
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NavManager.NavigateTo("/Error");
        }
    }

    private void Add()
    {
        NavManager.NavigateTo("AddItem");
    }

    private async Task WipeButtonPressed()
    {
        try
        {
            bool result = await RecordsService.WipeRecordAsync();
            if (result)
            {
                await Reload();
            }
            else
            {
                NavManager.NavigateTo("/Error");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NavManager.NavigateTo("/Error");
        }
    }

    public async Task Reload()
    {
    //record = await RecordsService.GetRecordByIdAsync(9999);
        await OnInitializedAsync();
        StateHasChanged();
    }

    private void ChangeDescriptionButtonPressed()
    {
        NavManager.NavigateTo("/ChangeRecordDescription");
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await ClipboardService.WriteTextAsync(record.Id.ToString());
        }
        catch
        {
            Console.WriteLine("Cannot write text to clipboard");
        }
    }
}